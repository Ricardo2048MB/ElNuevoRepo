DOSSEG
.MODEL SMALL
.DATA
    U_1000	EQU	1000
	U_100 	EQU	100
	U_10 	EQU 10
	U_1 	EQU	1
	NUMERO  DW 0

    MENSAJE DB  10,13,186," Introduzca un numero (4 digitos) : ","$"
    MSG_HEXADECIMAL DB 10,13,186," En Hexadecimal : ","$"
    MSG_OCTAL   DB 10,13,186," En Octal       : ","$"
    MSG_BINARIO DB 10,13,186," En Binario     : ","$"
    MSG_DECIMAL DB 10,13,186," En Decimal     : ","$"
	ESCUELA     DB 10,13,186,"                       UNIVERSIDAD TECNOLOGICA DE MEXICO                        ",186,"$"
	MATERIA     DB 10,13,186,"                  ARQUITECTURA Y PROGRAMACION DE COMPUTADORAS                   ",186,"$"
	TITULO      DB 10,13,186,"                              TABLA DE CONVERSIONES                             ",186,"$"
	MSG_SALIR   DB 10,13,186," Presione 'X' para salir o cualquier otra tecla para repetir:                   ",186,"$"

.STACK
.CODE

EXTRN   WRITE_STRING:PROC
EXTRN 	WRITE_CHAR:PROC
EXTRN 	READ_CHAR:PROC
EXTRN 	READ_CHAR_SIN_ECHO:PROC
EXTRN 	WRITE_DECIMAL:PROC
EXTRN	OPEN_FRAME:PROC
EXTRN	CLOSE_FRAME:PROC
EXTRN	MIDDLE_FRAME:PROC
EXTRN 	EMPTY_FRAME:PROC
EXTRN 	COMPLETE_FRAME:PROC

TEST_PRINCIPAL PROC
    MOV AX,@DATA
    MOV DS,AX
	
	;MOV SI,2
	;MOV DX,1234
    ;CALL WRITE_DECIMAL
	
	;MOV SI,8
	;MOV DX,1234
    ;CALL WRITE_DECIMAL
    
	CALL OPEN_FRAME
	LEA DX,ESCUELA
    CALL WRITE_STRING
	CALL MIDDLE_FRAME
	LEA DX,MATERIA
    CALL WRITE_STRING
	CALL MIDDLE_FRAME
	LEA DX,TITULO
    CALL WRITE_STRING
	CALL MIDDLE_FRAME
	
REPITE_PROCESO:
	
    LEA DX,MENSAJE
    CALL WRITE_STRING
	
	MOV NUMERO, 0H
	
	;el primer dígito son los millares
    MOV BX,U_1000
    CALL READ_CHAR
	XOR AH,AH
	SUB AL, 30H
	MUL BX
	ADD NUMERO,AX

	;el segundo dígito son las centenas
	MOV BX,U_100
	CALL READ_CHAR
	XOR AH,AH
	SUB AL, 30H
	MUL BX
	ADD NUMERO,AX
 
	;el tercer dígito son las decenas
    MOV BX,U_10
    CALL READ_CHAR
	XOR AH,AH
	SUB AL, 30H
	MUL BX
	ADD NUMERO,AX
  
	;el cuarto dígito son las unidades
    MOV BX,U_1
    CALL READ_CHAR
	XOR AH,AH
	SUB AL, 30H
	MUL BX
	ADD NUMERO,AX
	
	MOV CX,40
	CALL COMPLETE_FRAME
	CALL EMPTY_FRAME
	
    LEA DX,MSG_BINARIO
    CALL WRITE_STRING
    MOV SI,2
	MOV DX,NUMERO
    CALL WRITE_DECIMAL
	MOV CX,62
	SUB CX,BX
	CALL COMPLETE_FRAME

    LEA DX,MSG_OCTAL
    CALL WRITE_STRING
    MOV SI,8
	MOV DX,NUMERO
    CALL WRITE_DECIMAL
	MOV CX,62
	SUB CX,BX
	CALL COMPLETE_FRAME
    
    LEA DX,MSG_HEXADECIMAL
    CALL WRITE_STRING
    MOV SI,16
    MOV DX,NUMERO
    CALL WRITE_DECIMAL
	MOV CX,62
	SUB CX,BX
	CALL COMPLETE_FRAME
    
    LEA DX,MSG_DECIMAL
    CALL WRITE_STRING
    MOV SI,10
    MOV DX,NUMERO
    CALL WRITE_DECIMAL
	MOV CX,62
	SUB CX,BX
	CALL COMPLETE_FRAME

	CALL EMPTY_FRAME
	LEA DX,MSG_SALIR
	CALL WRITE_STRING
	CALL READ_CHAR_SIN_ECHO
	CALL EMPTY_FRAME
	CMP AL,'x'
	JE SALIR 
	CMP AL,'X'
	JNE REPITE_PROCESO
SALIR:
	CALL CLOSE_FRAME
  .EXIT
TEST_PRINCIPAL ENDP

END